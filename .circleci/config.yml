# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  lint-and-test:
    docker:
      # specify the version
      - image: circleci/golang:1.13

    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    environment:
        - BINARY_NAME: "eri-linux-amd64"
        - TEST_RESULTS: "/tmp/test-results"

    steps:
      - checkout
      - run: mkdir -p ${TEST_RESULTS}
      - run: go get github.com/jstemmer/go-junit-report
      - run: go get -u ./...
      - run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.24.0

      - run:
          # Check if we have updates to minor/patch level packages we're explicitly referencing
          name: Dep check
          command: |
            go list -u -f '{{if (and (not (or .Main .Indirect)) .Update)}}{{.Path}}: {{.Version}} -> {{.Update.Version}}{{end}}' -m all 2> /dev/null

      - run:
          name: Build
          command: |
            TAG=${CIRCLE_TAG:-dev}
            CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o "${TEST_RESULTS}/${BINARY_NAME}" -a -ldflags="-w -s -X main.Version=${TAG}" ./cmd/web

      - run:
          name: Lint
          command: |
            golangci-lint run

      - run:
          name: Test
          command: |
            go test -test.v ./... | go-junit-report > ${TEST_RESULTS}/report.xml
            go test -test.cover ./...
            go test -test.race ./...
            go test -test.benchmem -test.run=^$ -bench=. ./...

      - store_test_results:
          path: "/tmp/test-results"



workflows:
  version: 2
  build-test-deploy:
    jobs:
      - lint-and-test:
          filters:
            tags:
              only: /.*/