[client]

  # The maximum length (in bytes) of the "input" field, to accept to the finder.
  inputLengthMax = 50

[server]
  # The interface and port to listen on, "0.0.0.0" means all interfaces
  listenOn = "0.0.0.0:1338"

  # The maximum amount of concurrent (TCP) connections to handle. A value of 0 means a fallback on net.Listener's defaults
  connectionLimit = 4096

  # The path to strip from the request, this allows for path prefixing in ingresses (e.g. in k8s). Paths should
  # start with, but not end with, a `/`. The result is that both /eri/suggest and /suggest will work.
  pathStrip = "/eri"

  [server.CORS]
    # @see https://github.com/rs/cors#parameters
    allowedOrigins = [
      "*"
    ]

    allowedHeaders = [
      "*"
    ]

  [server.headers]
    Strict-Transport-Security = "max-age=31536000; includeSubDomains"
    Content-Security-Policy = "default-src 'none'"
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin"

  [server.hash]
    # The key for the 128bit highwayhash algorithm. Must be exactly 32 bytes.
    key = "00000000000000000000000000000000"

  [server.log]
    # The minimum logging level to report, @see https://github.com/Sirupsen/logrus#level-logging
    level = "debug"

    # "json" or "text". JSON plays nice with structured loggers (like GCP's Stackdriver). Text is nice for Humans.
    type = "json"

  [server.profiler]

    # Enable pprof @see https://blog.golang.org/pprof
    enable = true

    # The prefix to use in the request path /<prefix>/pprof/...
    prefix = "debug"

  [server.finder]

    # Speeds up the process of finding similar strings, but assumes no mistakes made in the prefix as trade-off.
    # @see https://github.com/Dynom/TySug/pull/14
    useBuckets = true

  [server.validator]

    # Use this resolver, instead of the local DNS hostname configured for this system. Since speed matters, pick a fast
    # public resolver (e.g.: 1.1.1.1, 8.8.4.4 or 8.8.8.8), or if you roll your own using (e.g. SkyDNS). An empty string
    # disables the custom resolver and uses the locally configured one (not recommended)
    resolver = "8.8.8.8"

    # Choose from: "structure", "lookup", "connect" (not recommended)
    # For initial setup and learning, structure is probably most suitable
    suggest = "lookup"

  [server.backend]
    # Drivers: https://github.com/golang/go/wiki/SQLDrivers
    driver = "postgres"

    # Postgres: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING
    url = "postgresql://postgres@localhost:15432/eri?sslmode=disable"

    # Maximum connections allowed to the backend
    maxConnections = 10

    # Maximum idle connections (must be less than maxConnections). 0 Means no idle connections are retained.
    maxIdleConnections = 2

  [server.graphql]

    prettyOutput = true
    graphiQL = false
    playground = false

  [server.rateLimiter]

    # Leaky bucket implementation. Rate is per second. This means ~100 req/s, with bursts / peaks. Set the capacity or
    # rate to <= 0 to disable rate limiting entirely
    rate = 100
    capacity = 500

    # amount of time a rate-limited request is allowed to wait for. Anything above this is aborted, to help protect
    # against connection draining. Requests are delayed
    parkedTTL = "100ms"

  [server.services.autocomplete]

    # Domains need at least (inclusive) this amount of recipients to be considered for the autocomplete API
    # This is mostly to prevent leaking possibly private information
    recipientThreshold = 1000